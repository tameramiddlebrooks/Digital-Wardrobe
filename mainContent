//
//  mainContent.swift
//  DigitalWardrobe
//
//  Created by tamera middlebrooks on 3/22/24.
//

import SwiftUI

struct mainContent: View {
    // arrays to store the position and dragging state for each individual image
    
    let clothingImages = ["flowerTee", "pinkBlouse", "brown-turtleneck", "pleated-skirt", "jeans", "red-dress"]
    
    
    @State private var positions: [CGPoint] = Array(repeating: .zero, count: 6)
    
    // ^ image position
    
    @State private var isDragging: [Bool] = Array(repeating: false, count: 6)
    // ^ tracks whether the image is currently being dragged or not
    
    let imageWidth: CGFloat = 100
    let spacing: CGFloat = 20
    
    private var threeColumnGrid = [GridItem(.flexible()), GridItem(.flexible()), GridItem(.flexible())]

    
    let gradientBackground = LinearGradient(
        colors: [Color.pink.opacity(0.3), Color.purple.opacity(0.4)],
        startPoint: .top, endPoint: .bottom)
    
    var body: some View {
        
        ZStack {
            gradientBackground
                .ignoresSafeArea()
            
            VStack {
                
                Image("characterModel")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(width: 350, height: 250)
                    .padding(.top, 45)
                    .padding(.bottom, 75)

                Spacer()
                
                
                
                Spacer()
                
                GeometryReader { geometry in
                    
//                                        ScrollView(.horizontal, showsIndicators: false) {
//
                    HStack(spacing: 35) {
                        LazyVGrid(columns: threeColumnGrid) {

                            ForEach(0..<self.clothingImages.count) { index in //
                                
                                // looping through the array to implement dragging logic
                                
                                Image(self.clothingImages[index])
                                
                                    .resizable()
                                
                                    .aspectRatio(contentMode: .fit)
                                
                                    .frame(width: 100, height: 100)
                                
                                    .offset(x: self.positions[index].x, y: self.positions[index].y)
//                                offsets the position of the image by the values stored in the positions array at the index & implements dragging behavior, where the image's position is adjusted based on the drag gesture.
//
                                    .animation(     .spring())
                                
                                    .gesture(
                                    // modifier attaching a gesture to DragGesture in the image view, that responds to the user's drag gesture and updates the positions array accordingly when the user drags the image
                                        
                                        DragGesture()
                                        
                                            .onChanged { value in
                                                
                                                self.positions[index] = CGPoint(x: value.translation.width, y: value.translation.height)
                                                
                                                self.isDragging[index] = true
                                            }
                                        
                                            .onEnded { _ in
                                                
                                                self.isDragging[index] = false
                                            }
                                    )
                                    .opacity(self.isDragging[index] ? 0.5 : 1.0)
                            }
                        }
                        Spacer()
                        
                    }
                    .padding()
                    .frame(width: geometry.size.width, height: 100)
                    
                    //                    }
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
                
            }
            
            
            
        }
        
    }


  


#Preview {
    mainContent()
}
